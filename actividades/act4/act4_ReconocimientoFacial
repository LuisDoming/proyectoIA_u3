import cv2
import os
import numpy as np
from matplotlib import pyplot as plt

# Etiquetas
subjects = ["", "Abraham", "Ricardo", "Alexandra", "Luis"]

# Función para detectar rostros en una imagen
def detect_face(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5)
    if len(faces) == 0:
        return None, None
    (x, y, w, h) = faces[0]
    return gray[y:y+w, x:x+h], faces[0]

# Función para preparar los datos de entrenamiento
def prepare_training_data(data_folder_path):
    dirs = os.listdir(data_folder_path)
    faces = []
    labels = []

    for dir_name in dirs:
        if not dir_name.startswith("s"):
            continue
        label = int(dir_name.replace("s", ""))
        subject_dir_path = data_folder_path + "/" + dir_name
        subject_images_names = os.listdir(subject_dir_path)

        for image_name in subject_images_names:
            if image_name.startswith("."):
                continue
            image_path = subject_dir_path + "/" + image_name
            image = cv2.imread(image_path)
            face, rect = detect_face(image)

            if face is not None:
                faces.append(face)
                labels.append(label)

    return faces, labels

# Preparar datos
print("Preparando datos...")
faces, labels = prepare_training_data("./img")
print("Datos preparados")
print("Total faces: ", len(faces))
print("Total labels: ", len(labels))

# FisherFaceRecognizer
# FisherFaceRecognizer
face_recognizer = cv2.face.FisherFaceRecognizer_create()
face_recognizer.train(faces, np.array(labels))


# Funciones para dibujar rectángulos y texto
def draw_rectangle(img, rect):
    (x, y, w, h) = rect
    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)

def draw_text(img, text, x, y):
    cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)

# Función para predecir y mostrar la imagen
def predict(test_img):
    img = test_img.copy()
    face, rect = detect_face(img)
    label, confidence = face_recognizer.predict(face)
    label_text = subjects[label]
    draw_rectangle(img, rect)
    draw_text(img, label_text, rect[0], rect[1]-5)
    return img

# Predicciones
print("Prediciendo imágenes...")

# Cargar imágenes de prueba
test_img1 = cv2.imread("./img/testdata/s3/tonyStark.1.jpeg")

# Predecir
predicted_img1 = predict(test_img1)
print("Predicción completa")

# Mostrar imágenes
plt.imshow(predicted_img1)
plt.show()